//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfTicketera
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;

    public partial class Cliente
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Cliente()
        {
            this.Tickets = new HashSet<Ticket>();
        }

        public int Id_Cliente { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string CI { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Ticket> Tickets { get; set; }

        public override string ToString()
        {
            return this.Nombre;
        }


        public static async Task<List<Cliente>> ObtenerTodos()
        {
            List<Cliente> lstclientes = new List<Cliente>();

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("https://localhost:44333/");

                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage respuesta = await client.GetAsync("api/ClientesApi");

                if (respuesta.IsSuccessStatusCode)
                {
                    lstclientes = await respuesta.Content.ReadAsAsync<List<Cliente>>();
                }
            }

            return lstclientes;
        }

        public static async Task<bool> AgregarCliente(Cliente p)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("https://localhost:44333/");
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage respuesta = await client.PostAsJsonAsync("api/ClientesApi", p); //Aqui va el Endpoint api/Personas, junto con el Objeto Persona (p), ya que el objeto tiene en los valores de sus atributos, los valores para crear un nuevo recurso Persona.
                return respuesta.IsSuccessStatusCode;
            }
        }

        public static async Task<bool> ModificarCliente(Cliente p)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("https://localhost:44333/");
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                HttpResponseMessage respuesta = await client.PutAsJsonAsync("api/ClientesApi/" + p.Id_Cliente, p); //Aqui se envia el EndPoint (por ejemplo) api/Personas/8 y el objeto Persona, ya que ahi estan los nuevos valores para modificar al recurso (Persona).
                return respuesta.IsSuccessStatusCode;
            }
        }

        public static async Task<bool> EliminarCliente(Cliente p)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("https://localhost:44333/");
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                HttpResponseMessage respuesta = await client.DeleteAsync("api/ClientesApi/" + p.Id_Cliente); //Aqui necesitamos el Endpoint nada mas, seria por ejemplo, para acceder al recurso y eliminar a la persona de ID=8:  api/Personas/8 
                return respuesta.IsSuccessStatusCode;
            }
        }


    }
}
